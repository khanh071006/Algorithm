#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#define FOR(i, l, r) for (int i = l; i <= r; i++)
#define FOD(i, r, l) for (int i = r; i >= l; i--)
#define faster                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
#define vt vector
#define ll long long
#define pb push_back
#define ii pair<int, int>
#define mp make_pair
#define fi first
#define se second
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)(a.size())
#define cout_str(a) printf(a)
// #define maxn 100000
int min(int a, int b)
{
    if (a <= b)
        return a;
    else
        return b;
}
int max(int a, int b)
{
    if (a >= b)
        return a;
    else
        return b;
}
int board[10][10];

void out()
{
    FOR(i, 1, 9)
    {
        FOR(j, 1, 9)
        {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}
int markR[10][10];
int markC[10][10];
int markS[10][10][10];
int res = 0;
void Try(int x, int y)
{
    if (board[x][y] != 0)
    {
        if (y < 9)
            Try(x, y + 1);
        else
            Try(x + 1, 1);
        return;
    }
    if (x == 10)
    {
        res++;
        return;
    }
    FOR(i, 1, 9)
    {
        if (!markC[x][i] && !markR[y][i] && !markS[(x - 1) / 3][(y - 1) / 3][i])
        {
            markC[x][i] = 1;
            markR[y][i] = 1;
            markS[(x - 1) / 3][(y - 1) / 3][i] = 1;
            board[x][y] = i;
            if (y < 9)
                Try(x, y + 1);
            else
                Try(x + 1, 1);
            markC[x][i] = 0;
            markR[y][i] = 0;
            markS[(x - 1) / 3][(y - 1) / 3][i] = 0;
            board[x][y] = 0;
        }
    }
}
int main()
{
    FOR(i, 1, 9)
    {
        FOR(j, 1, 9)
        {
            scanf("%d", &board[i][j]);
            if (board[i][j] != 0)
            {
                markC[i][board[i][j]] = 1;
                markR[j][board[i][j]] = 1;
                markS[(i - 1) / 3][(j - 1) / 3][board[i][j]] = 1;
            }
        }
    }
    Try(1, 1);
    printf("%d", res);
    return 0;
}
